# Copyright (c) 2010-2013, Regents of the University of California.
# All rights reserved.
#
# Released under the BSD 3-Clause license as published at the link below.
# https://openwsn.atlassian.net/wiki/display/OW/License

""" SCons script to run the application within the source repository. Provides the runtui target. """

import os
import signal
import subprocess

import sconsutils

Import('env')


def tui_runner(target, source, env):
    """
    Builder to run OpenVisualizerApp as subprocess in current directory.
    Note: Although this SCons task is constructed in the bin directory, it is executed from the root OpenVisualizer
    directory (../..).

    Target is never created; always runs Python app. Does not check if app is running already.
    """

    # Include root directory
    pypath = '.'
    try:
        env_path = os.environ['PYTHONPATH']
        if env_path:
            pypath = pypath + os.pathsep + env_path
    except KeyError:
        pass

    sub_env = os.environ.copy()
    sub_env['PYTHONPATH'] = pypath

    arg_list = ['python', str(source[0]), '-a', env['BUILD_DIR']]

    if env['HOST']:
        arg_list.append('--host={0}'.format(env['HOST']))

    if env['PORT']:
        arg_list.append('--port={0}'.format(env['PORT']))

    if env['SIMCOUNT']:
        arg_list.append('--simCount={0}'.format(env['SIMCOUNT']))

    elif env['SIMOPT']:
        arg_list.append('--sim')

    if env['SIMTOPOLOGY']:
        arg_list.append('--simTopology={0}'.format(env['SIMTOPOLOGY']))

    if env['PATHTOPO']:
        arg_list.append('--pathTopo={0}'.format(env['PATHTOPO']))

    if env['DEBUGOPT']:
        arg_list.append('--debug')

    if env['OPENTESTBED']:
        arg_list.append('--opentestbed')

    if env['MQTT_BROKER_ADDRESS']:
        arg_list.append('--mqtt-broker-address=' + '{0}'.format(env['MQTT_BROKER_ADDRESS']))

    if env['OPENTUN']:
        arg_list.append('--opentun')

    if env['USEPAGEZERO']:
        arg_list.append('--usePageZero')

    result = 0
    try:
        p = subprocess.Popen(arg_list, env=sub_env)

        if env['WAIT_ON_UI']:
            # Must wait for a program that uses raw_input(); otherwise
            # SCons exits and standard input is sent to shell.
            result = p.wait()

            if (os.name == 'posix' and result == -signal.SIGTERM) or (os.name != 'posix' and result == signal.SIGTERM):
                # Likely from console; not an error
                result = 0
        else:
            # Display PID to make it easier to kill if necessary.
            print 'Child PID is {0}'.format(p.pid)
    except ValueError or OSError:
        result = 1

    return result


def setup_tui_runner(env, ui_file, data_dirs):
    """
    Sets up dependencies for data files required to run an OpenVisualizer
    UI. The data files are copied to the environment's BUILD_DIR.

    * Copies simulation firmware to the sim_files data directory if running a simulation.
    * Creates commands to copy conf files unless they exist already. The user may have edited them.
    * Creates commands to copy the provided static data directories unconditionally.

    :param env: contains the build environment
    :param ui_file: filename to run in openVisualizerApp directory
    :param data_dirs: dirs containing static data
    :rtype: the targets reference for the Builder.
    """

    # Create Builder to run OpenVisualizer
    env.Append(BUILDERS={'RunUi': Builder(action=tui_runner)})

    targets = env.RunUi(ui_file)

    Depends(targets, 'defines.py')
    Command('defines.py', '', 'python bin/generate_defines.py')

    if (env['SIMOPT'] or env['SIMCOUNT']) and env['SIMCOPYOPT']:
        # Appending ui_file to pseudo-target to make it unique.
        sim_fw_target = 'simui-{0}'.format(ui_file)
        Depends(targets, sim_fw_target)
        sconsutils.copy_simulation_fw(env, sim_fw_target)

    for node in (env['CONF_FILES'] + env['DATA_FILES']):
        bldNode = os.path.join(env['BUILD_DIR'], node)

        Depends(targets, bldNode)
        Command(
            bldNode,
            node,
            [
                Mkdir(env['BUILD_DIR']),
                Copy('$TARGET', '$SOURCE')
            ]
        )

    for node in env['DATA_DIRS']:
        bldNode = os.path.join(env['BUILD_DIR'], node)

        Depends(targets, bldNode)
        Command(
            bldNode,
            node,
            [
                Delete('$TARGET'),
                Mkdir(env['BUILD_DIR']),
                Copy('$TARGET', '$SOURCE')
            ]
        )
        AlwaysBuild(bldNode)

    return targets


# Prepare the environment to create builders for data files and directoires, as well as a builder to run the app itself.
env['BUILD_DIR'] = os.path.join(env['ROOT_BUILD_DIR'], 'runui')
env['WAIT_ON_UI'] = False

# Must create the entries for use here and by parent SConstruct to identify these kinds of files for other use.
env['CONF_FILES'] = ['openvisualizer.conf', 'logging.conf', 'trace.conf']
env['DATA_DIRS'] = ['web_files', 'sim_files']
env['DATA_FILES'] = []

# Customize environment for each target. Must remove 'host' and 'port'
tuiEnv = env.Clone()
tuiEnv['WAIT_ON_UI'] = True
Alias('runtui', setup_tui_runner(tuiEnv, 'opentui.py', []))
