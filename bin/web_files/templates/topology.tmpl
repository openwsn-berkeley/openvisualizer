<!DOCTYPE html>
<html>
    <head>
        %include head.tmpl
        <style type="text/css">
            #map-canvas {
                height            : 600px;
                display           : block;
            }
            #update_button {
                padding           : 5px;
                backgroundColor   : 'white';
                borderStyle       : 'solid';
                borderWidth       : 2px;
                textAlign         : 'center';
            }
            .labels {
                color             : yellow;
                background-color  : blue;
                font-family       : "Lucida Grande", "Arial", sans-serif;
                font-size         : 10px;
                font-weight       : bold;
                text-align        : center;
                width             : 40px;
                border            : 1px solid yellow;
                white-space       : nowrap;
            }
            #topology-options {
                margin-bottom     : 10px;
            }
        </style>
        <script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false"></script>
        <script src="/static/js/markerwithlabel.js"></script>
        <script type="text/javascript">
            // global variables
            var map;
            var connectioninfo;
            var newConnection;
            var routeLine;
            var motes                  = [];
            var connections            = [];
            var DATA_LOAD_PERIOD       = 5000;
            var mapLock                = false;
            var busyDrawingConnection  = false;

            /**
            \brief Initialize the topology display
            */
            function initialize() {

                // map
                var mapOptions = {
                    center:    new google.maps.LatLng(37.875095,-122.257473),
                    zoom:      19,
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };
                map = new google.maps.Map(
                    document.getElementById("map-canvas"),
                    mapOptions
                );

                // connectioninfo
                connectioninfo = new google.maps.InfoWindow();
                google.maps.event.addListener(
                    connectioninfo,
                    'closeclick',
                    clearMapLock
                );

                // newConnection
                newConnection = {
                    'fromMote':  null,
                    'line':      new google.maps.Polyline(
                        {
                            geodesic:      true,
                            strokeOpacity: 0.5,
                            strokeWeight:  1
                        }
                    )
                }

                // routeLine
                routeLine = new google.maps.Polyline(
                    {
                        geodesic:      true,
                        strokeOpacity: 0.8,
                        strokeWeight:  5,
                        strokeColor:   '#0000ff'

                    }
                )

                // load mote data
                getTopologyData();
            }

            /**
            \brief Retrieve the topology data from the server.
            */
            function getTopologyData() {

                if (mapLock==false) {
                    $.ajax({
                        type:    "GET",
                        url:      "/topology/data",
                        success:  handleNewData,
                    })
                    .fail(function() {
                        console.log("ERROR: could not GET topology data");
                    });
                }

                window.setTimeout(getTopologyData,DATA_LOAD_PERIOD);
            }

            /**
            \brief Update the topology using the new data.
            */
            function handleNewData(newData) {
                var i;
                var title;
                var marker;

                // mark all motes for deletion
                for (id in motes) {
                    motes[id].deleteMe      = true;
                }

                // mark all connections for deletion
                for (i=0; i<connections.length; i++) {
                    connections[i].deleteMe     = true;
                }

                // create/update motes
                var id;
                var lat;
                var lon;
                for (i=0; i<newData.motes.length; i++) {

                    id       = newData.motes[i].id;
                    lat      = newData.motes[i].lat;
                    lon      = newData.motes[i].lon;

                    if (!(id in motes)) {
                        // new mote

                        // create mote
                        motes[id] = {
                            'lat':      lat,
                            'lon':      lon,
                            'deleteMe': false,
                            'marker':   new MarkerWithLabel({
                                            draggable:     true,
                                            map:           map,
                                            labelContent:  id.toString(),
                                            labelAnchor:   new google.maps.Point(22, 0),
                                            labelClass:    "labels",
                                            labelStyle:    {opacity: 0.75},
                                        })
                        }

                        // add listeners
                        google.maps.event.addListener(
                            motes[id].marker,
                            'dragstart',
                            setMapLock
                        );
                        google.maps.event.addListener(
                            motes[id].marker,
                            'dragend',
                            moteMoved
                        );
                        google.maps.event.addListener(
                            motes[id].marker,
                            'mouseout',
                            hideRoute
                        );
                        attachMouseoverMarker(id);
                        attachRightClickCreateConnection(id);
                    }

                    // update mote
                    motes[id].lat = lat;
                    motes[id].lon = lon;
                    motes[id].marker.setPosition(
                        new google.maps.LatLng(lat,lon)
                    );

                    // don't delete this mote
                    motes[id].deleteMe      = false;
                }

                // create/update connections
                var fromMote;
                var toMote;
                var pdr;
                var connectionIdx;
                var connectionColor;
                for (i=0; i<newData.connections.length; i++) {

                    fromMote = newData.connections[i].fromMote;
                    toMote   = newData.connections[i].toMote;
                    pdr      = newData.connections[i].pdr;

                    connectionIdx = getConnectionIdx(fromMote,toMote);

                    if (connectionIdx==null) {
                        // new connection

                        connections.push(
                            {
                                'fromMote':    fromMote,
                                'toMote':      toMote,
                                'deleteMe':    false,
                                'line':        new google.maps.Polyline(
                                    {
                                        geodesic:      true,
                                        strokeOpacity: 1.0,
                                        strokeWeight:  2,
                                        map:           map
                                    }
                                ),
                            }
                        );

                        connectionIdx = connections.length-1;

                        attachPdrInfoWindow(connectionIdx);
                    }

                    // update connection
                    connections[connectionIdx].line.setPath(
                        [
                            new google.maps.LatLng(
                                motes[fromMote].lat,
                                motes[fromMote].lon
                            ),
                            new google.maps.LatLng(
                                motes[toMote].lat,
                                motes[toMote].lon
                            )
                        ]
                    )
                    connections[connectionIdx].pdr = pdr;
                    if        (connections[connectionIdx].pdr>0.66) {
                        connectionColor = '#339933';
                    } else if (connections[connectionIdx].pdr>0.33) {
                        connectionColor = '#ff9900';
                    } else {
                        connectionColor = '#ff0000';
                    }
                    connections[connectionIdx].line.setOptions({strokeColor: connectionColor});

                    // don't delete this connection
                    connections[connectionIdx].deleteMe  = false;
                }

                // delete all connections still marked for deletion
                for (i=0; i<connections.length; i++) {
                    if (connections[i].deleteMe==true) {
                        connections[i].line.setMap(null);
                        connections.splice(i,1);
                        i--;
                    }
                }

                // delete all motes still marked for deletion
                for (id in motes) {
                    if (motes[id].deleteMe==true) {
                        motes[id].marker.setMap(null);
                        delete motes[id];
                        i--;
                    }
                }
            }

            function getConnectionIdx(fromMote,toMote) {
                for (var i=0; i<connections.length; i++) {
                    if  (
                            connections[i].fromMote==fromMote &&
                            connections[i].toMote==toMote
                        ) {
                        return i;
                    }
                }
                return null;
            }

            function attachMouseoverMarker(id) {
                google.maps.event.addListener(
                    motes[id].marker,
                    'mouseover',
                    function(event){
                        getRoute(id);
                    }
                );
            }

            function attachRightClickCreateConnection(id) {
                google.maps.event.addListener(
                    motes[id].marker,
                    'rightclick',
                    function(event){
                        connectionCreationStep(id);
                    }
                );
            }

            function attachPdrInfoWindow(connectionIdx) {
                var fromMote = connections[connectionIdx].fromMote;
                var toMote   = connections[connectionIdx].toMote;
                var pdr      = connections[connectionIdx].pdr;

                google.maps.event.addListener(
                    connections[connectionIdx].line,
                    'click',
                    function(event){
                        setMapLock();
                        connectionClicked(fromMote,toMote,event.latLng);
                    }
                );
            }

            //=============== GUI events ======================================

            function setMapLock() {
                mapLock = true;
            }
            function clearMapLock() {
                mapLock = false;
            }

            function moteMoved() {
                var tempMotes;
                var moteId;

                tempMotes = []
                for (moteId in motes) {
                    tempMotes.push({
                        'id':     moteId,
                        'lat':    motes[moteId].marker.getPosition().lat(),
                        'lon':    motes[moteId].marker.getPosition().lng()
                    })
                }

                $.ajax({
                    type:    "POST",
                    url:     "/topology/motes",
                    data:    {
                        'motes': tempMotes,
                    }
                })
                .done(function( msg ) {
                    console.log("INFO: new motePositions successfully POSTed to server.");
                })
                .fail(function() {
                    console.log("ERROR: could not POST updated topology data.");
                })
                .always(function() {

                    // get new data from server
                    $.ajax({
                        type:    "GET",
                        url:      "/topology/data",
                        success:  handleNewData,
                    })
                    .fail(function() {
                        console.log("ERROR: could not GET topology data");
                    })
                    .always(function() {

                        // resume automated update
                        clearMapLock();
                    });
                })
            }

            function getRoute(id) {
                $.ajax({
                    type:    "GET",
                    url:     "/topology/route",
                    data:    {
                        'destination': id,
                    },
                    success:  handleRoute,
                })
                .fail(function() {
                    console.log("ERROR: could not GET route from server.");
                })
            }

            function handleRoute(routeData) {

                var routePath = [];

                for (i=0; i<routeData.route.length; i++) {
                    routePath.push(
                        new google.maps.LatLng(
                            motes[routeData.route[i]].lat,
                            motes[routeData.route[i]].lon
                        )
                    )
                }

                routeLine.setPath(routePath);
                routeLine.setMap(map);
            }

            function hideRoute() {
                routeLine.setMap(null);
            }

            function connectionCreationStep(id) {

                if (busyDrawingConnection==false) {
                    // start

                    console.log('start at '+id);

                    // lock the automatic refresh of the map
                    setMapLock();

                    // remember I'm busy drawing now
                    busyDrawingConnection = true;

                    // start the line
                    newConnection.fromMote = id;

                    // listen to mouse moving
                    google.maps.event.addListener(
                        map,
                        'mousemove',
                        connectionCreationMoved
                    );

                } else {
                    // stop

                    console.log('stop at '+id);

                    // stop listening to mouse moving
                    google.maps.event.clearListeners(
                        map,
                        'mousemove'
                    );

                    // send new connection to server
                    connectionCreated(newConnection.fromMote,id);
                }
            }

            function connectionCreationMoved(pt) {

                newConnection.line.setPath(
                    [
                        new google.maps.LatLng(
                            motes[newConnection.fromMote].lat,
                            motes[newConnection.fromMote].lon
                        ),
                        pt.latLng
                    ]
                )
                newConnection.line.setMap(map);
            }

            function connectionCreated(fromMote,toMote) {

                $.ajax({
                    type:    "PUT",
                    url:     "/topology/connections",
                    data:    {
                        'fromMote': fromMote,
                        'toMote':   toMote,
                    }
                })
                .done(function( msg ) {
                    console.log("INFO: new connection successfully PUT on server.");
                })
                .fail(function() {
                    console.log("ERROR: could not PUT new connection to server.");
                })
                .always(function() {

                    // get new data from server
                    $.ajax({
                        type:     "GET",
                        url:      "/topology/data",
                        success:  handleNewData,
                    })
                    .fail(function() {
                        console.log("ERROR: could not GET topology data");
                    })
                    .always(function() {

                        // hide line
                        newConnection.line.setMap(null);

                        // I'm not draing a new connection anymore
                        busyDrawingConnection = false;

                        // resume automated update
                        clearMapLock();
                    });
                })
            }

            function connectionClicked(fromMote,toMote,latlon) {
                var connectionIdx;
                var content;

                connectionIdx = getConnectionIdx(fromMote,toMote);

                content  = ''
                content += fromMote+'-'+toMote+':<br/>'
                content += '<input size="10" id="newPDR" value="'+connections[connectionIdx].pdr+'">'
                content += '<button onclick="connectionUpdated('+fromMote+','+toMote+')">set PDR</button><br/>'
                content += '<button onclick="connectionDeleted('+fromMote+','+toMote+')">delete connection</button>'

                connectioninfo.setContent(content);
                connectioninfo.setPosition(latlon);
                connectioninfo.open(map);
            }

            function connectionUpdated(fromMote,toMote) {
                var newPDR;

                // retrieve new PDR from form
                newPDR = $("#newPDR").val();

                // send to server
                $.ajax({
                    type:    "POST",
                    url:     "/topology/connections",
                    data:    {
                        'fromMote': fromMote,
                        'toMote':   toMote,
                        'pdr':      newPDR,
                    }
                })
                .done(function( msg ) {
                    console.log("INFO: new PDR successfully POSTed to server.");
                })
                .fail(function() {
                    console.log("ERROR: could not POST new PDR.");
                })
                .always(function() {

                    // get new data from server
                    $.ajax({
                        type:     "GET",
                        url:      "/topology/data",
                        success:  handleNewData,
                    })
                    .fail(function() {
                        console.log("ERROR: could not GET topology data");
                    })
                    .always(function() {

                        // close info window
                        connectioninfo.close();

                        // resume automated update
                        clearMapLock();
                    });
                })
            }

            function connectionDeleted(fromMote,toMote) {

                // send to server
                $.ajax({
                    type:    "DELETE",
                    url:     "/topology/connections",
                    data:    {
                        'fromMote': fromMote,
                        'toMote':   toMote,
                    }
                })
                .done(function( msg ) {
                    console.log("INFO: connection DELETEed from server.");
                })
                .fail(function() {
                    console.log("ERROR: could not DELETE connection.");
                })
                .always(function() {

                    // get new data from server
                    $.ajax({
                        type:     "GET",
                        url:      "/topology/data",
                        success:  handleNewData,
                    })
                    .fail(function() {
                        console.log("ERROR: could not GET topology data");
                    })
                    .always(function() {

                        // close info window
                        connectioninfo.close();

                        // resume automated update
                        clearMapLock();
                    });
                })
            }

            //=============== main ============================================

            google.maps.event.addDomListener(window, 'load', initialize);
        </script>
    </head>
    <body>
        <div id="wrapper">
            %include navbar.tmpl ovVersion=ovVersion

            <div id="page-wrapper">
                <div class="row">
                    <div class="col-lg-12">
                        <h1 class="page-header">Topology</h1>
                    </div>
                </div>
                <div id= "topology-options">
                    <div class="row">
                        <div class="col-lg-12">
                            <h4>Topology options</h3>

                            <a href="topology/download"><button id="topology_download_btn" type="button" class="btn btn-default btn-xs">Save topology</button></a>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-lg-12">
                        <div id="map-canvas"/>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
